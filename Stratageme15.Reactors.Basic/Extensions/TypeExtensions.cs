using System;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using Stratageme15.Core.Translation;

namespace Stratageme15.Reactors.Basic.Extensions
{
    public static class TypeExtensions
    {
        public static string JavascriptTypeName(this Type t)
        {
            return JavascriptTypeName(t.Namespace, t.Name);
        }

        public static string JavascriptTypeName(string nameSpace, string typeName)
        {
            return string.Format("{0}${1}", nameSpace.Replace(".", string.Empty), typeName);
        }

        public static bool IsMethodOfThis(this Type t, string methodName)
        {
            MemberInfo member = TypeInferer.GetMember(t, methodName);
            if (member == null) return false;
            return member.MemberType == MemberTypes.Method;
        }

        public static bool IsThisFieldVariable(this Type t, string varName)
        {
            MemberInfo member = TypeInferer.GetMember(t, varName);
            if (member == null) return false;
            if (member.MemberType == MemberTypes.Field) return true;
            return false;
        }

        public static bool IsThisFieldOrPropertyVariable(this Type t, string varName)
        {
            MemberInfo member = TypeInferer.GetMember(t, varName);
            if (member == null) return false;
            if (member.MemberType == MemberTypes.Field) return true;
            if (member.MemberType == MemberTypes.Property) return true;
            return false;
        }

        public static bool IsProperty(this Type t, string varName)
        {
            MemberInfo member = TypeInferer.GetMember(t, varName);
            if (member == null) return false;
            if (member.MemberType != MemberTypes.Property) return false;
            return true;
        }

        public static bool IsAutoProperty(this Type t, string propName)
        {
            MemberInfo member = TypeInferer.GetMember(t, propName);
            if (member == null) throw new Exception(string.Format("No member with name {0} in type {1}", propName, t));
            if (member.MemberType != MemberTypes.Property)
                throw new Exception(string.Format("Member {0} if type {1} is not property", propName, t));
            var pinfo = member as PropertyInfo;
            return pinfo.IsPropertyAutoGenerated();
        }

        public static bool IsPropertyAutoGenerated(this PropertyInfo pi)
        {
            bool autogenGetter = pi.GetGetMethod().GetCustomAttribute<CompilerGeneratedAttribute>() != null;
            if (!autogenGetter) return false;

            if (pi.DeclaringType == null) return true;

            bool autogenBacking = pi.DeclaringType.GetFields(BindingFlags.NonPublic | BindingFlags.Instance)
                .Where(f => f.Name.Contains(pi.Name))
                .Where(f => f.Name.Contains("BackingField")).Any(
                    f => f.GetCustomAttributes(typeof (CompilerGeneratedAttribute), true).Any());

            return autogenBacking;
        }
    }
}